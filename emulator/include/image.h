#pragma once

#include "driver.h"
const uint8_t image_data[BUFFER_SIZE] = {0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x03, 0x03, 0x03,
    0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73,
    0x73, 0x73, 0x73, 0xF3, 0xF3, 0xF3, 0xF3, 0x03, 0x03, 0x03, 0x03, 0xFF, 0xFF, 0xFF,
    0xFF, 0x77, 0x73, 0x73, 0x73, 0xF3, 0xF3, 0xF3, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x0F, 0x0F, 0x0F, 0x1F, 0x73, 0x73,
    0x73, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF3, 0xF3, 0xF3, 0xF3, 0xC3, 0xC3, 0xC3,
    0xC3, 0x03, 0x03, 0x03, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0x73, 0x73, 0x73, 0x77, 0xFF,
    0xFF, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, 0xF3, 0xF3, 0xF3, 0xF3, 0x73, 0x73, 0x73,
    0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3,
    0x03, 0x03, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
    0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
    0x70, 0x70, 0x70, 0x70, 0x77, 0x7F, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0xFF, 0xFF, 0xFF, 0x70, 0x70, 0x70, 0x70, 0xE0, 0xC1, 0xC1, 0xC1, 0xF3, 0x77, 0x77,
    0x77, 0xF3, 0xF0, 0xF0, 0xF0, 0xFF, 0x1F, 0x1F, 0x1F, 0x1F, 0xC0, 0xC0, 0xC0, 0xC0,
    0x7F, 0x7F, 0x7F, 0x7F, 0xF1, 0xF1, 0xF1, 0xF1, 0x7D, 0x7D, 0x7D, 0x7D, 0xFD, 0xDD,
    0xDD, 0xDD, 0xDC, 0x1C, 0x1C, 0x1C, 0xDC, 0xC1, 0xC1, 0xC1, 0xCF, 0x1F, 0x1F, 0x1F,
    0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x77,
    0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x7F, 0x7F, 0x7F,
    0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x67, 0x07, 0x07, 0x07, 0x67, 0x77,
    0x77, 0x77, 0x7F, 0x1F, 0x1F, 0x1F, 0x9F, 0xDF, 0xDF, 0xDF, 0xDF, 0x77, 0x77, 0x77,
    0x77, 0xDF, 0xDF, 0xDF, 0xDF, 0x77, 0x77, 0x77, 0x77, 0xFF, 0xDD, 0xDD, 0xDD, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x77, 0x77,
    0x77, 0x77, 0xC7, 0xC7, 0xC7, 0xC7, 0xFD, 0xFD, 0xFD, 0xFD, 0xDC, 0x1C, 0x1C, 0x1C,
    0xF9, 0xF1, 0xF1, 0xF1, 0xF1, 0x70, 0x70, 0x70, 0xF1, 0xC1, 0xC1, 0xC1, 0xC9, 0x1C,
    0x1C, 0x1C, 0x1C, 0xF7, 0xF7, 0xF7, 0xF7, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
    0x1F, 0x07, 0x07, 0x07, 0x07, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0x77, 0x77, 0x77, 0x7F,
    0x7F, 0x7F, 0x7F, 0xFF, 0xC7, 0xC7, 0xC7, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0x1F, 0x1F, 0x1F, 0x1F, 0x9E, 0x80, 0x80, 0x80, 0xE6, 0x67, 0x67, 0x67,
    0xE6, 0x80, 0x80, 0x80, 0x98, 0x18, 0x18, 0x18, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x67,
    0x67, 0x67, 0x67, 0xFD, 0xF9, 0xF9, 0xF9, 0xDF, 0x9F, 0x9F, 0x9F, 0xFF, 0x67, 0x67,
    0x67, 0x7F, 0x1F, 0x1F, 0x1F, 0x9F, 0x81, 0x81, 0x81, 0xF9, 0x79, 0x79, 0x79, 0xF9,
    0xE0, 0xE0, 0xE0, 0xE0, 0x01, 0x01, 0x01, 0x01, 0xE7, 0xE7, 0xE7, 0xE7, 0xE3, 0x00,
    0x00, 0x00, 0x87, 0x87, 0x87, 0x87, 0xFF, 0xF8, 0xF8, 0xF8, 0xFF, 0x07, 0x07, 0x07,
    0x1F, 0x18, 0x18, 0x18, 0x38, 0x79, 0x79, 0x79, 0x79, 0x98, 0x98, 0x98, 0x98, 0x18,
    0x18, 0x18, 0x18, 0x78, 0x78, 0x78, 0x78, 0xFF, 0xE7, 0xE7, 0xE7, 0xE7, 0x07, 0x07,
    0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x19, 0x19, 0x19, 0x1D, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0, 0xE0, 0xE0, 0xF9, 0x99, 0x99, 0x99, 0x9F, 0x86,
    0x86, 0x86, 0xE7, 0xE1, 0xE1, 0xE1, 0xE1, 0x80, 0x80, 0x80, 0xFE, 0xFE, 0xFE, 0xFE,
    0xFE, 0xE6, 0xE6, 0xE6, 0xE6, 0xBF, 0x9F, 0x9F, 0x9F, 0x1B, 0x19, 0x19, 0x19, 0x1F,
    0x1E, 0x1E, 0x1E, 0x7E, 0xE6, 0xE6, 0xE6, 0xE7, 0xE7, 0xE7, 0xE7, 0x7F, 0x18, 0x18,
    0x18, 0xBC, 0xFF, 0xFF, 0xFF, 0xFF, 0xB8, 0x98, 0x98, 0x98, 0x19, 0x19, 0x19, 0x19,
    0x79, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x87, 0x87, 0xFF, 0xFE,
    0xFE, 0xFE, 0xFE, 0x80, 0x80, 0x80, 0x80, 0x86, 0x86, 0x86, 0x8E, 0xF9, 0xF9, 0xF9,
    0xF9, 0x38, 0x18, 0x18, 0x18, 0xF8, 0xE0, 0xE0, 0xE0, 0xE7, 0x87, 0x87, 0x87, 0x9F,
    0x1E, 0x1E, 0x1E, 0x9E, 0x80, 0x80, 0x80, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xEF, 0xEF, 0xEF, 0xEF,
    0xFF, 0xFB, 0xFB, 0xFB, 0xF9, 0xE0, 0xE0, 0xE0, 0xF9, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB,
    0xFB, 0xFB, 0xFB, 0xEE, 0xEE, 0xEE, 0xEE, 0xEF, 0xEF, 0xEF, 0xEF, 0x8E, 0x8E, 0x8E,
    0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
    0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0xE3, 0xE3, 0xE3, 0xEE, 0xEE,
    0xEE, 0xEE, 0xF8, 0xF8, 0xF8, 0xF8, 0xFB, 0xE3, 0xE3, 0xE3, 0xE7, 0x8F, 0x8F, 0x8F,
    0xEF, 0xE3, 0xE3, 0xE3, 0xE3, 0x03, 0x03, 0x03, 0x43, 0xE3, 0xE3, 0xE3, 0xE3, 0xEF,
    0xEF, 0xEF, 0xEF, 0xEE, 0xEE, 0xEE, 0xEE, 0xCF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
    0x0F, 0x87, 0x80, 0x80, 0x80, 0x9F, 0x3F, 0x3F, 0x3F, 0x3F, 0xBF, 0xBF, 0xBF, 0xBF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE,
    0xFE, 0xFE, 0xFE, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
    0xEE, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F,
    0x3F, 0x3F, 0x3F, 0xFF, 0xF8, 0xF8, 0xF8, 0xFE, 0xEE, 0xEE, 0xEE, 0xFE, 0x3E, 0x3E,
    0x3E, 0x3E, 0x8E, 0x8E, 0x8E, 0xAE, 0xF8, 0xF8, 0xF8, 0xF8, 0xE0, 0xE0, 0xE0, 0xE0,
    0x83, 0x83, 0x83, 0x83, 0x8F, 0x8F, 0x8F, 0x8F, 0xEF, 0xEF, 0xEF, 0xEF, 0xFF, 0xFB,
    0xFB, 0xFB, 0xFF, 0xBE, 0xBE, 0xBE, 0xBE, 0x80, 0x80, 0x80, 0x84, 0x0F, 0x0F, 0x0F,
    0x0F, 0xEE, 0xEE, 0xEE, 0xEE, 0xEF, 0xEF, 0xEF, 0xEF, 0xC7, 0x80, 0x80, 0x80, 0xB8,
    0xB8, 0xB8, 0xB8, 0xFF, 0xEF, 0xEF, 0xEF, 0xEF, 0xE0, 0xE0, 0xE0, 0xE7, 0x0F, 0x0F,
    0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xC0, 0xC0, 0xC0,
    0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE,
    0xCE, 0xCE, 0xCE, 0xCF, 0xCF, 0xCF, 0xCF, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF,
    0xFF, 0xE0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFC,
    0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xC3, 0xC3,
    0xC3, 0xC3, 0xCF, 0xCF, 0xCF, 0xCF, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xF3, 0xF3, 0xF3, 0xF3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xE3, 0xFE,
    0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xFF, 0xFE, 0xFE, 0xFE, 0xFF, 0xC3, 0xC3, 0xC3, 0xFF,
    0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF};

/**
 * @struct offset
 * @brief Represents an offset with x and y coordinates.
 */
typedef struct offset {
    int x; /** The x coordinate of the offset. */
    int y; /** The y coordinate of the offset. */
} offset_t;

/**
 * @typedef ScreenCoord
 * @brief Alias for the offset_t structure.
 */
typedef offset_t ScreenCoord;

/**
 * Negates each pixel in the given pixel array.
 *
 * @param pixelArray The array of pixels to be negated.
 * @param size The size of the pixel array.
 */
void negateImage(uint8_t pixelArray[], const uint16_t size) {
    for (uint16_t i = 0; i < size; i++) {
        pixelArray[i] = ~pixelArray[i];
    }
}

/**
 * Shifts an image based on the given offset coordinates.
 *
 * @param offsetCoord The offset coordinates to shift the image by.
 * @param oldImage The original image to be shifted.
 * @param newImage The shifted image.
 * @param coords The dimensions of the image.
 */
void shiftImage(const offset_t offsetCoord, const uint8_t oldImage[],
    uint8_t newImage[], const ScreenCoord coords) {
    // Clear the new image
    for (int i = 0; i < coords.x * (coords.y / 8); i++) {
        newImage[i] = 0;
    }

    // Shift the image based on the offset coordinates
    for (int y = 0; y < coords.y; y++) {
        for (int x = 0; x < coords.x; x++) {
            int newX = x + offsetCoord.x;
            int newY = y + offsetCoord.y;

            // Check if the new coordinates are within bounds
            if (newX >= 0 && newX < coords.x && newY >= 0 && newY < coords.y) {
                int oldByteIndex = (y / 8) * coords.x + x;
                uint8_t oldBitIndex = y % 8;
                int newByteIndex = (newY / 8) * coords.x + newX;
                uint8_t newBitIndex = newY % 8;

                // Extract the bit from the old image
                uint8_t bit = (oldImage[oldByteIndex] >> oldBitIndex) & 1;

                // Set the bit in the new image
                newImage[newByteIndex] |= (bit << newBitIndex);
            }
        }
    }
}
